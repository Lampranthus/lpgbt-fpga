/*******************************************************************************
 *                       __       _______ ______ _______                       *
 *                      |  .-----|     __|   __ |_     _|                      *
 *                      |  |  _  |    |  |   __ < |   |                        *
 *                      |__|   __|_______|______/ |___|                        *
 *                         |__|                                                *
 *                                                                             *
 *  Copyright (C) 2018 GBT Team, CERN                                          *
 *                                                                             *
 *  This IP block is free for HEP experiments and other scientific research    *
 *  purposes. Commercial exploitation of a chip containing the IP is not       *
 *  permitted.  You can not redistribute the IP without written permission     *
 *  from the authors. Any modifications of the IP have to be communicated back *
 *  to the authors. The use of the IP should be acknowledged in publications,  *
 *  public presentations, user manual, and other documents.                    *
 *                                                                             *
 *  This IP is distributed in the hope that it will be useful, but WITHOUT ANY *
 *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *
 *  FOR A PARTICULAR PURPOSE.                                                  *
 *                                                                             *
 *******************************************************************************
 *                                                                             *
 *  file: lpGBT_model.v                                                          *
 *                                                                             *
 *  Simple lpGBT test bench                                                    *
 *                                                                             *
 *  History:                                                                   *
 *  2018/07/20 Szymon Kulis    : Created                                       *
 *                                                                             *
 *******************************************************************************/


  
module lpGBT_model (
  input  GND,
  input  VDD1V2,
  input  GNDTX,
  input  VDDTX1V2,
  input  GNDRX,
  input  VDDRX1V2,
  input  GNDA,
  input  VDDA1V2,
  input  VDDF2V5,
  output HSOUTP,
  output HSOUTN,
  input  HSINP,
  input  HSINN,
  output ECLK0P,
  output ECLK0N,
  output ECLK1P,
  output ECLK1N,
  output ECLK2P,
  output ECLK2N,
  output ECLK3P,
  output ECLK3N,
  output ECLK4P,
  output ECLK4N,
  output ECLK5P,
  output ECLK5N,
  output ECLK6P,
  output ECLK6N,
  output ECLK7P,
  output ECLK7N,
  output ECLK8P,
  output ECLK8N,
  output ECLK9P,
  output ECLK9N,
  output ECLK10P,
  output ECLK10N,
  output ECLK11P,
  output ECLK11N,
  output ECLK12P,
  output ECLK12N,
  output ECLK13P,
  output ECLK13N,
  output ECLK14P,
  output ECLK14N,
  output ECLK15P,
  output ECLK15N,
  output ECLK16P,
  output ECLK16N,
  output ECLK17P,
  output ECLK17N,
  output ECLK18P,
  output ECLK18N,
  output ECLK19P,
  output ECLK19N,
  output ECLK20P,
  output ECLK20N,
  output ECLK21P,
  output ECLK21N,
  output ECLK22P,
  output ECLK22N,
  output ECLK23P,
  output ECLK23N,
  output ECLK24P,
  output ECLK24N,
  output ECLK25P,
  output ECLK25N,
  output ECLK26P,
  output ECLK26N,
  output ECLK27P,
  output ECLK27N,
  output ECLK28P,
  output ECLK28N,
  output EDOUT00P,
  output EDOUT00N,
  output EDOUT01P,
  output EDOUT01N,
  output EDOUT02P,
  output EDOUT02N,
  output EDOUT03P,
  output EDOUT03N,
  output EDOUT10P,
  output EDOUT10N,
  output EDOUT11P,
  output EDOUT11N,
  output EDOUT12P,
  output EDOUT12N,
  output EDOUT13P,
  output EDOUT13N,
  output EDOUT20P,
  output EDOUT20N,
  output EDOUT21P,
  output EDOUT21N,
  output EDOUT22P,
  output EDOUT22N,
  output EDOUT23P,
  output EDOUT23N,
  output EDOUT30P,
  output EDOUT30N,
  output EDOUT31P,
  output EDOUT31N,
  output EDOUT32P,
  output EDOUT32N,
  output EDOUT33P,
  output EDOUT33N,
  output EDOUTECP,
  output EDOUTECN,
  input EDIN00P,
  input EDIN00N,
  input EDIN01P,
  input EDIN01N,
  input EDIN02P,
  input EDIN02N,
  input EDIN03P,
  input EDIN03N,
  input EDIN10P,
  input EDIN10N,
  input EDIN11P,
  input EDIN11N,
  input EDIN12P,
  input EDIN12N,
  input EDIN13P,
  input EDIN13N,
  input EDIN20P,
  input EDIN20N,
  input EDIN21P,
  input EDIN21N,
  input EDIN22P,
  input EDIN22N,
  input EDIN23P,
  input EDIN23N,
  input EDIN30P,
  input EDIN30N,
  input EDIN31P,
  input EDIN31N,
  input EDIN32P,
  input EDIN32N,
  input EDIN33P,
  input EDIN33N,
  input EDIN40P,
  input EDIN40N,
  input EDIN41P,
  input EDIN41N,
  input EDIN42P,
  input EDIN42N,
  input EDIN43P,
  input EDIN43N,
  input EDIN50P,
  input EDIN50N,
  input EDIN51P,
  input EDIN51N,
  input EDIN52P,
  input EDIN52N,
  input EDIN53P,
  input EDIN53N,
  input EDIN60P,
  input EDIN60N,
  input EDIN61P,
  input EDIN61N,
  input EDIN62P,
  input EDIN62N,
  input EDIN63P,
  input EDIN63N,
  input EDINECP,
  input EDINECN,
  //input EDINECTERM,
  output PSCLK0P,
  output PSCLK0N,
  output PSCLK1P,
  output PSCLK1N,
  output PSCLK2P,
  output PSCLK2N,
  output PSCLK3P,
  output PSCLK3N,
  inout SLSDA,
  inout SLSCL,
  input ADR0,
  input ADR1,
  input ADR2,
  input ADR3,
  input LOCKMODE,
  input RSTB,
  output RSTOUTB,
  input MODE0,
  input MODE1,
  input MODE2,
  input MODE3,
  output READY,
  input  PORDIS,
  input  REFCLKP,
  input  REFCLKN,
  //input  BOOTCNF1,
  //input  BOOTCNF0,
  output TSTOUT0,
  output TSTOUT1,
  output TSTOUT2,
  output TSTOUT3,
  output TSTOUT4P,
  output TSTOUT4N,
  output TSTOUT5P,
  output TSTOUT5N,
  inout M0SDA,
  inout M0SCL,
  inout M1SDA,
  inout M1SCL,
  inout M2SDA,
  inout M2SCL,
  inout  GPIO0,
  inout  GPIO1,
  inout  GPIO2,
  inout  GPIO3,
  inout  GPIO4,
  inout  GPIO5,
  inout  GPIO6,
  inout  GPIO7,
  inout  GPIO8,
  inout  GPIO9,
  inout  GPIO10,
  inout  GPIO11,
  inout  GPIO12,
  inout  GPIO13,
  inout  GPIO14,
  inout  GPIO15,
  inout  ADC0,
  inout  ADC1,
  inout  ADC2,
  inout  ADC3,
  inout  ADC4,
  inout  ADC5,
  inout  ADC6,
  inout  ADC7,
  output VDAC,
  inout  VREF,
  output [463*8-1:0]  debug_registers,
  output [127:0]      debug_testOutputs
);

`include "lpGBTDefines.v"
  localparam [31:0] MYID = 32'h76543210;
  
  lpGBT  #(
    // assign chip ID
    .FUSE0x00_CHIPID0          (MYID[ 7: 0]),
    .FUSE0x01_CHIPID1          (MYID[15: 8]),
    .FUSE0x02_CHIPID2          (MYID[23:16]),
    .FUSE0x03_CHIPID3          (MYID[31:24]),
    // configure clock generator block
    .FUSE0x20_CLKGCONFIG0      ( ('hC << CLKGCONFIG0_CLKGCALIBRATIONENDOFCOUNT_of)                  | ('h8 << CLKGCONFIG0_CLKGBIASGENCONFIG_of) ),
    .FUSE0x21_CLKGCONFIG1      ( CLKGCONFIG1_CLKGCDRRES_bm                                          | CLKGCONFIG1_CLKGVCORAILMODE_bm | ('h8 << CLKGCONFIG0_CLKGBIASGENCONFIG_of) ),
    .FUSE0x23_CLKGPLLINTCUR    ( ('h9 << CLKGPLLINTCUR_CLKGPLLINTCURWHENLOCKED_of)                  | ('h9 << CLKGPLLINTCUR_CLKGPLLINTCUR_of)  ),
    .FUSE0x24_CLKGPLLPROPCUR   ( ('h9 << CLKGPLLPROPCUR_CLKGPLLPROPCURWHENLOCKED_of)                | ('h9 << CLKGPLLPROPCUR_CLKGPLLPROPCUR_of)  ),
    .FUSE0x22_CLKGPLLRES       ( ('h2 << CLKGPLLRES_CLKGPLLRESWHENLOCKED_of)                        | ('h2 << CLKGPLLRES_CLKGPLLRES_of)  ),
    .FUSE0x29_CLKGFFCAP        ( ('h3 << CLKGFFCAP_CLKGFEEDFORWARDCAPWHENLOCKED_of)                 | ('h3 << CLKGFFCAP_CLKGFEEDFORWARDCAP_of)  ),
    .FUSE0x26_CLKGCDRINTCUR    ( ('h5 << CLKGCDRINTCUR_CLKGCDRINTCURWHENLOCKED_of)                  | ('h5 << CLKGCDRINTCUR_CLKGCDRINTCUR_of) ),
    .FUSE0x28_CLKGFLLINTCUR    ( ('h5 << CLKGFLLINTCUR_CLKGFLLINTCURWHENLOCKED_of)                  | ('h5 << CLKGFLLINTCUR_CLKGFLLINTCUR_of) ),
    .FUSE0x25_CLKGCDRPROPCUR   ( ('h5 << CLKGCDRPROPCUR_CLKGCDRPROPCURWHENLOCKED_of)                | ('h5 << CLKGCDRPROPCUR_CLKGCDRPROPCUR_of) ),
    .FUSE0x27_CLKGCDRFFPROPCUR ( ('h6 << CLKGCDRFFPROPCUR_CLKGCDRFEEDFORWARDPROPCURWHENLOCKED_of)   | ('h6 << CLKGCDRFFPROPCUR_CLKGCDRFEEDFORWARDPROPCUR_of) ),
    .FUSE0x2D_CLKGLFCONFIG0    ( (CLKGLFCONFIG0_CLKGLOCKFILTERENABLE_bm                             | ('d11 << CLKGLFCONFIG0_CLKGLOCKFILTERLOCKTHRCOUNTER_of))),
    .FUSE0x2E_CLKGLFCONFIG1    ( ('d11 << CLKGLFCONFIG1_CLKGLOCKFILTERRELOCKTHRCOUNTER_of)          | ('d11 << CLKGLFCONFIG1_CLKGLOCKFILTERUNLOCKTHRCOUNTER_of)),
    .FUSE0x2C_CLKGWAITTIME     ( ('h8 << CLKGWAITTIME_CLKGWAITCDRTIME_of)                           | ('h8 << CLKGWAITTIME_CLKGWAITPLLTIME_of)),
    //  configure ePortClocks
    .FUSE0x6E_EPCLK0CHNCNTRH   ( (1<<EPCLK0CHNCNTRH_EPCLK0DRIVESTRENGTH_of)                         | (EportClocksClk160M << EPCLK0CHNCNTRH_EPCLK0FREQ_of)),
    .FUSE0x70_EPCLK1CHNCNTRH   ( (1<<EPCLK1CHNCNTRH_EPCLK1DRIVESTRENGTH_of)                         | (EportClocksClk160M << EPCLK1CHNCNTRH_EPCLK1FREQ_of)),
    .FUSE0x72_EPCLK2CHNCNTRH   ( (1<<EPCLK2CHNCNTRH_EPCLK2DRIVESTRENGTH_of)                         | (EportClocksClk160M << EPCLK2CHNCNTRH_EPCLK2FREQ_of)),
    .FUSE0x74_EPCLK3CHNCNTRH   ( (1<<EPCLK3CHNCNTRH_EPCLK3DRIVESTRENGTH_of)                         | (EportClocksClk160M << EPCLK3CHNCNTRH_EPCLK3FREQ_of)),
    .FUSE0x76_EPCLK4CHNCNTRH   ( (1<<EPCLK4CHNCNTRH_EPCLK4DRIVESTRENGTH_of)                         | (EportClocksClk160M << EPCLK4CHNCNTRH_EPCLK4FREQ_of)),
    .FUSE0x78_EPCLK5CHNCNTRH   ( (1<<EPCLK5CHNCNTRH_EPCLK5DRIVESTRENGTH_of)                         | (EportClocksClk160M << EPCLK5CHNCNTRH_EPCLK5FREQ_of)),
    .FUSE0x7A_EPCLK6CHNCNTRH   ( (1<<EPCLK6CHNCNTRH_EPCLK6DRIVESTRENGTH_of)                         | (EportClocksClk160M << EPCLK6CHNCNTRH_EPCLK6FREQ_of)),
    .FUSE0x7C_EPCLK7CHNCNTRH   ( (1<<EPCLK7CHNCNTRH_EPCLK7DRIVESTRENGTH_of)                         | (EportClocksClk160M << EPCLK7CHNCNTRH_EPCLK7FREQ_of)),
    .FUSE0x7E_EPCLK8CHNCNTRH   ( (1<<EPCLK8CHNCNTRH_EPCLK8DRIVESTRENGTH_of)                         | (EportClocksClk160M << EPCLK8CHNCNTRH_EPCLK8FREQ_of)),
    .FUSE0x80_EPCLK9CHNCNTRH   ( (1<<EPCLK9CHNCNTRH_EPCLK9DRIVESTRENGTH_of)                         | (EportClocksClk160M << EPCLK9CHNCNTRH_EPCLK9FREQ_of)),
    .FUSE0x82_EPCLK10CHNCNTRH  ( (1<<EPCLK10CHNCNTRH_EPCLK10DRIVESTRENGTH_of)                       | (EportClocksClk160M << EPCLK10CHNCNTRH_EPCLK10FREQ_of)),
    .FUSE0x84_EPCLK11CHNCNTRH  ( (1<<EPCLK11CHNCNTRH_EPCLK11DRIVESTRENGTH_of)                       | (EportClocksClk160M << EPCLK11CHNCNTRH_EPCLK11FREQ_of)),
    .FUSE0x86_EPCLK12CHNCNTRH  ( (1<<EPCLK12CHNCNTRH_EPCLK12DRIVESTRENGTH_of)                       | (EportClocksClk160M << EPCLK12CHNCNTRH_EPCLK12FREQ_of)),
    .FUSE0x88_EPCLK13CHNCNTRH  ( (1<<EPCLK13CHNCNTRH_EPCLK13DRIVESTRENGTH_of)                       | (EportClocksClk160M << EPCLK13CHNCNTRH_EPCLK13FREQ_of)),
    .FUSE0x8A_EPCLK14CHNCNTRH  ( (1<<EPCLK14CHNCNTRH_EPCLK14DRIVESTRENGTH_of)                       | (EportClocksClk160M << EPCLK14CHNCNTRH_EPCLK14FREQ_of)),
    .FUSE0x8C_EPCLK15CHNCNTRH  ( (1<<EPCLK15CHNCNTRH_EPCLK15DRIVESTRENGTH_of)                       | (EportClocksClk160M << EPCLK15CHNCNTRH_EPCLK15FREQ_of)),
    .FUSE0x8E_EPCLK16CHNCNTRH  ( (1<<EPCLK16CHNCNTRH_EPCLK16DRIVESTRENGTH_of)                       | (EportClocksClk160M << EPCLK16CHNCNTRH_EPCLK16FREQ_of)),
    .FUSE0x90_EPCLK17CHNCNTRH  ( (1<<EPCLK17CHNCNTRH_EPCLK17DRIVESTRENGTH_of)                       | (EportClocksClk160M << EPCLK17CHNCNTRH_EPCLK17FREQ_of)),
    .FUSE0x92_EPCLK18CHNCNTRH  ( (1<<EPCLK18CHNCNTRH_EPCLK18DRIVESTRENGTH_of)                       | (EportClocksClk160M << EPCLK18CHNCNTRH_EPCLK18FREQ_of)),
    .FUSE0x94_EPCLK19CHNCNTRH  ( (1<<EPCLK19CHNCNTRH_EPCLK19DRIVESTRENGTH_of)                       | (EportClocksClk160M << EPCLK19CHNCNTRH_EPCLK19FREQ_of)),
    .FUSE0x96_EPCLK20CHNCNTRH  ( (1<<EPCLK20CHNCNTRH_EPCLK20DRIVESTRENGTH_of)                       | (EportClocksClk160M << EPCLK20CHNCNTRH_EPCLK20FREQ_of)),
    .FUSE0x98_EPCLK21CHNCNTRH  ( (1<<EPCLK21CHNCNTRH_EPCLK21DRIVESTRENGTH_of)                       | (EportClocksClk160M << EPCLK21CHNCNTRH_EPCLK21FREQ_of)),
    .FUSE0x9A_EPCLK22CHNCNTRH  ( (1<<EPCLK22CHNCNTRH_EPCLK22DRIVESTRENGTH_of)                       | (EportClocksClk160M << EPCLK22CHNCNTRH_EPCLK22FREQ_of)),
    .FUSE0x9C_EPCLK23CHNCNTRH  ( (1<<EPCLK23CHNCNTRH_EPCLK23DRIVESTRENGTH_of)                       | (EportClocksClk160M << EPCLK23CHNCNTRH_EPCLK23FREQ_of)),
    .FUSE0x9E_EPCLK24CHNCNTRH  ( (1<<EPCLK24CHNCNTRH_EPCLK24DRIVESTRENGTH_of)                       | (EportClocksClk160M << EPCLK24CHNCNTRH_EPCLK24FREQ_of)),
    .FUSE0xA0_EPCLK25CHNCNTRH  ( (1<<EPCLK25CHNCNTRH_EPCLK25DRIVESTRENGTH_of)                       | (EportClocksClk160M << EPCLK25CHNCNTRH_EPCLK25FREQ_of)),
    .FUSE0xA2_EPCLK26CHNCNTRH  ( (1<<EPCLK26CHNCNTRH_EPCLK26DRIVESTRENGTH_of)                       | (EportClocksClk160M << EPCLK26CHNCNTRH_EPCLK26FREQ_of)),
    .FUSE0xA4_EPCLK27CHNCNTRH  ( (1<<EPCLK27CHNCNTRH_EPCLK27DRIVESTRENGTH_of)                       | (EportClocksClk160M << EPCLK27CHNCNTRH_EPCLK27FREQ_of)),
    .FUSE0xA6_EPCLK28CHNCNTRH  ( (1<<EPCLK28CHNCNTRH_EPCLK28DRIVESTRENGTH_of)                       | (EportClocksClk80M  << EPCLK28CHNCNTRH_EPCLK28FREQ_of)),
    // configure ePortRx
    .FUSE0xC8_EPRX0CONTROL(EPRX0CONTROL_EPRX03ENABLE_bm | EPRX0CONTROL_EPRX02ENABLE_bm | EPRX0CONTROL_EPRX01ENABLE_bm  | EPRX0CONTROL_EPRX00ENABLE_bm |
                           EportDataRateLsX4<<EPRX0CONTROL_EPRX0DATARATE_of | EportRxTrackingModeContinous << EPRX0CONTROL_EPRX0TRACKMODE_of),

    .FUSE0xC9_EPRX1CONTROL(EPRX1CONTROL_EPRX13ENABLE_bm | EPRX1CONTROL_EPRX12ENABLE_bm | EPRX1CONTROL_EPRX11ENABLE_bm  | EPRX1CONTROL_EPRX10ENABLE_bm |
                           EportDataRateLsX4<<EPRX1CONTROL_EPRX1DATARATE_of | EportRxTrackingModeContinous << EPRX1CONTROL_EPRX1TRACKMODE_of),

    .FUSE0xCA_EPRX2CONTROL(EPRX2CONTROL_EPRX23ENABLE_bm | EPRX2CONTROL_EPRX22ENABLE_bm | EPRX2CONTROL_EPRX21ENABLE_bm  | EPRX2CONTROL_EPRX20ENABLE_bm |
                           EportDataRateLsX4<<EPRX2CONTROL_EPRX2DATARATE_of | EportRxTrackingModeContinous << EPRX2CONTROL_EPRX2TRACKMODE_of),

    .FUSE0xCB_EPRX3CONTROL(EPRX3CONTROL_EPRX33ENABLE_bm | EPRX3CONTROL_EPRX32ENABLE_bm | EPRX3CONTROL_EPRX31ENABLE_bm  | EPRX3CONTROL_EPRX30ENABLE_bm |
                           EportDataRateLsX4<<EPRX3CONTROL_EPRX3DATARATE_of | EportRxTrackingModeContinous << EPRX3CONTROL_EPRX3TRACKMODE_of),

    .FUSE0xCC_EPRX4CONTROL(EPRX4CONTROL_EPRX43ENABLE_bm | EPRX4CONTROL_EPRX42ENABLE_bm | EPRX4CONTROL_EPRX41ENABLE_bm  | EPRX4CONTROL_EPRX40ENABLE_bm |
                           EportDataRateLsX4<<EPRX4CONTROL_EPRX4DATARATE_of | EportRxTrackingModeContinous << EPRX4CONTROL_EPRX4TRACKMODE_of),

    .FUSE0xCD_EPRX5CONTROL(EPRX5CONTROL_EPRX53ENABLE_bm | EPRX5CONTROL_EPRX52ENABLE_bm | EPRX5CONTROL_EPRX51ENABLE_bm  | EPRX5CONTROL_EPRX50ENABLE_bm |
                           EportDataRateLsX4<<EPRX5CONTROL_EPRX5DATARATE_of | EportRxTrackingModeContinous << EPRX5CONTROL_EPRX5TRACKMODE_of),

    .FUSE0xCE_EPRX6CONTROL(EPRX6CONTROL_EPRX63ENABLE_bm | EPRX6CONTROL_EPRX62ENABLE_bm | EPRX6CONTROL_EPRX61ENABLE_bm  | EPRX6CONTROL_EPRX60ENABLE_bm |
                           EportDataRateLsX4<<EPRX6CONTROL_EPRX6DATARATE_of | EportRxTrackingModeContinous << EPRX6CONTROL_EPRX6TRACKMODE_of),

    // configure line driver
    .FUSE0x39_LDCONFIGH        ( 1<<LDCONFIGH_LDMODULATIONCURRENT_of),

    // configure power up state machine
    .FUSE0xF9_POWERUP0         ( 8'b0),
    .FUSE0xFB_POWERUP2         ( POWERUP2_DLLCONFIGDONE_bm | POWERUP2_PLLCONFIGDONE_bm),
    // CRC32 checksum (if set to 0, the model will automaticaly compute valid CRC)
    .FUSE0xFC_CRC0(8'h00),
    .FUSE0xFD_CRC1(8'h00),
    .FUSE0xFE_CRC2(8'h00),
    .FUSE0xFF_CRC3(8'h00)
  )  lpGBT (
    // High speed link section
    .HSINN(HSINN),
    .HSINP(HSINP),
    .HSOUTN(HSOUTN),
    .HSOUTP(HSOUTP),

    // ePort Clocks
    .ECLK0N(ECLK0N),
    .ECLK0P(ECLK0P),
    .ECLK1N(ECLK1N),
    .ECLK1P(ECLK1P),
    .ECLK2N(ECLK2N),
    .ECLK2P(ECLK2P),
    .ECLK3N(ECLK3N),
    .ECLK3P(ECLK3P),
    .ECLK4N(ECLK4N),
    .ECLK4P(ECLK4P),
    .ECLK5N(ECLK5N),
    .ECLK5P(ECLK5P),
    .ECLK6N(ECLK6N),
    .ECLK6P(ECLK6P),
    .ECLK7N(ECLK7N),
    .ECLK7P(ECLK7P),
    .ECLK8N(ECLK8N),
    .ECLK8P(ECLK8P),
    .ECLK9N(ECLK9N),
    .ECLK9P(ECLK9P),
    .ECLK10N(ECLK10N),
    .ECLK10P(ECLK10P),
    .ECLK11N(ECLK11N),
    .ECLK11P(ECLK11P),
    .ECLK12N(ECLK12N),
    .ECLK12P(ECLK12P),
    .ECLK13N(ECLK13N),
    .ECLK13P(ECLK13P),
    .ECLK14N(ECLK14N),
    .ECLK14P(ECLK14P),
    .ECLK15N(ECLK15N),
    .ECLK15P(ECLK15P),
    .ECLK16N(ECLK16N),
    .ECLK16P(ECLK16P),
    .ECLK17N(ECLK17N),
    .ECLK17P(ECLK17P),
    .ECLK18N(ECLK18N),
    .ECLK18P(ECLK18P),
    .ECLK19N(ECLK19N),
    .ECLK19P(ECLK19P),
    .ECLK20N(ECLK20N),
    .ECLK20P(ECLK20P),
    .ECLK21N(ECLK21N),
    .ECLK21P(ECLK21P),
    .ECLK22N(ECLK22N),
    .ECLK22P(ECLK22P),
    .ECLK23N(ECLK23N),
    .ECLK23P(ECLK23P),
    .ECLK24N(ECLK24N),
    .ECLK24P(ECLK24P),
    .ECLK25N(ECLK25N),
    .ECLK25P(ECLK25P),
    .ECLK26N(ECLK26N),
    .ECLK26P(ECLK26P),
    .ECLK27N(ECLK27N),
    .ECLK27P(ECLK27P),
    .ECLK28N(ECLK28N),
    .ECLK28P(ECLK28P),

    // phase shifted clocks
    .PSCLK0N(PSCLK0N),
    .PSCLK0P(PSCLK0P),
    .PSCLK1N(PSCLK1N),
    .PSCLK1P(PSCLK1P),
    .PSCLK2N(PSCLK2N),
    .PSCLK2P(PSCLK2P),
    .PSCLK3N(PSCLK3N),
    .PSCLK3P(PSCLK3P),

    // ePort data inputs
    .EDIN00N(EDIN00N),
    .EDIN00P(EDIN00P),
    .EDIN01N(EDIN01N),
    .EDIN01P(EDIN01P),
    .EDIN02N(EDIN02N),
    .EDIN02P(EDIN02P),
    .EDIN03N(EDIN03N),
    .EDIN03P(EDIN03P),
    .EDIN10N(EDIN10N),
    .EDIN10P(EDIN10P),
    .EDIN11N(EDIN11N),
    .EDIN11P(EDIN11P),
    .EDIN12N(EDIN12N),
    .EDIN12P(EDIN12P),
    .EDIN13N(EDIN13N),
    .EDIN13P(EDIN13P),
    .EDIN20N(EDIN20N),
    .EDIN20P(EDIN20P),
    .EDIN21N(EDIN21N),
    .EDIN21P(EDIN21P),
    .EDIN22N(EDIN22N),
    .EDIN22P(EDIN22P),
    .EDIN23N(EDIN23N),
    .EDIN23P(EDIN23P),
    .EDIN30N(EDIN30N),
    .EDIN30P(EDIN30P),
    .EDIN31N(EDIN31N),
    .EDIN31P(EDIN31P),
    .EDIN32N(EDIN32N),
    .EDIN32P(EDIN32P),
    .EDIN33N(EDIN33N),
    .EDIN33P(EDIN33P),
    .EDIN40N(EDIN40N),
    .EDIN40P(EDIN40P),
    .EDIN41N(EDIN41N),
    .EDIN41P(EDIN41P),
    .EDIN42N(EDIN42N),
    .EDIN42P(EDIN42P),
    .EDIN43N(EDIN43N),
    .EDIN43P(EDIN43P),
    .EDIN50N(EDIN50N),
    .EDIN50P(EDIN50P),
    .EDIN51N(EDIN51N),
    .EDIN51P(EDIN51P),
    .EDIN52N(EDIN52N),
    .EDIN52P(EDIN52P),
    .EDIN53N(EDIN53N),
    .EDIN53P(EDIN53P),
    .EDIN60N(EDIN60N),
    .EDIN60P(EDIN60P),
    .EDIN61N(EDIN61N),
    .EDIN61P(EDIN61P),
    .EDIN62N(EDIN62N),
    .EDIN62P(EDIN62P),
    .EDIN63N(EDIN63N),
    .EDIN63P(EDIN63P),
    .EDINECN(EDINECN),
    .EDINECP(EDINECP),
    .EDINECTERM(1'b0),

    //ePort data outputs
    .EDOUT00N(EDOUT00N),
    .EDOUT00P(EDOUT00P),
    .EDOUT01N(EDOUT01N),
    .EDOUT01P(EDOUT01P),
    .EDOUT02N(EDOUT02N),
    .EDOUT02P(EDOUT02P),
    .EDOUT03N(EDOUT03N),
    .EDOUT03P(EDOUT03P),
    .EDOUT10N(EDOUT10N),
    .EDOUT10P(EDOUT10P),
    .EDOUT11N(EDOUT11N),
    .EDOUT11P(EDOUT11P),
    .EDOUT12N(EDOUT12N),
    .EDOUT12P(EDOUT12P),
    .EDOUT13N(EDOUT13N),
    .EDOUT13P(EDOUT13P),
    .EDOUT20N(EDOUT20N),
    .EDOUT20P(EDOUT20P),
    .EDOUT21N(EDOUT21N),
    .EDOUT21P(EDOUT21P),
    .EDOUT22N(EDOUT22N),
    .EDOUT22P(EDOUT22P),
    .EDOUT23N(EDOUT23N),
    .EDOUT23P(EDOUT23P),
    .EDOUT30N(EDOUT30N),
    .EDOUT30P(EDOUT30P),
    .EDOUT31N(EDOUT31N),
    .EDOUT31P(EDOUT31P),
    .EDOUT32N(EDOUT32N),
    .EDOUT32P(EDOUT32P),
    .EDOUT33N(EDOUT33N),
    .EDOUT33P(EDOUT33P),
    .EDOUTECN(EDOUTECN),
    .EDOUTECP(EDOUTECP),

    // power supply section
    .GND(GND),
    .GNDA(GNDA),
    .GNDRX(GNDRX),
    .GNDTX(GNDTX),
    .VDD1V2(VDD1V2),
    .VDDA1V2(VDDA1V2),
    .VDDF2V5(VDDF2V5),
    .VDDRX1V2(VDDRX1V2),
    .VDDTX1V2(VDDTX1V2),

    // GPIO section
    .GPIO0(GPIO0),
    .GPIO1(GPIO1),
    .GPIO2(GPIO2),
    .GPIO3(GPIO3),
    .GPIO4(GPIO4),
    .GPIO5(GPIO5),
    .GPIO6(GPIO6),
    .GPIO7(GPIO7),
    .GPIO8(GPIO8),
    .GPIO9(GPIO9),
    .GPIO10(GPIO10),
    .GPIO11(GPIO11),
    .GPIO12(GPIO12),
    .GPIO13(GPIO13),
    .GPIO14(GPIO14),
    .GPIO15(GPIO15),

    // Configuration and slow controll
    .LOCKMODE(LOCKMODE),
    .MODE0(MODE0),
    .MODE1(MODE1),
    .MODE2(MODE2),
    .MODE3(MODE3),
    .PORDIS(PORDIS),
    .ADR0(ADR0),
    .ADR1(ADR1),
    .ADR2(ADR2),
    .ADR3(ADR3),
    .REFCLKN(REFCLKN),
    .REFCLKP(REFCLKP),
    .READY(READY),
    .RSTB(RSTB),
    .RSTOUTB(RSTOUTB),
    .BOOTCNF1(1'b0),
    .BOOTCNF0(1'b0),
    .SLSCL(SLSCL),
    .SLSDA(SLSDA),

    // I2C masters
    .M0SCL(M0SCL),
    .M0SDA(M0SDA),
    .M1SCL(M1SCL),
    .M1SDA(M1SDA),
    .M2SCL(M2SCL),
    .M2SDA(M2SDA),

    // ADC inputs
    .ADC7(ADC7),
    .ADC6(ADC6),
    .ADC5(ADC5),
    .ADC4(ADC4),
    .ADC3(ADC3),
    .ADC2(ADC2),
    .ADC1(ADC1),
    .ADC0(ADC0),
    .VDAC(VDAC),
    .VREF(VREF),

    // test signals
    .TSTOUT0(TSTOUT0),
    .TSTOUT1(TSTOUT1),
    .TSTOUT2(TSTOUT2),
    .TSTOUT3(TSTOUT3),
    .TSTOUT4N(TSTOUT4N),
    .TSTOUT4P(TSTOUT4P),
    .TSTOUT5N(TSTOUT5N),
    .TSTOUT5P(TSTOUT5P),

    .debug_registers(debug_registers),
    .debug_testOutputs(debug_testOutputs)
  );

endmodule
